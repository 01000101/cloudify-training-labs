tosca_definitions_version: cloudify_dsl_1_3

description: >
  This blueprint describes an AWS single-tier application that is
  horizontally scalable.  It defines (by default) 2 AWS EC2 instances
  that will each have a web application running on it.  In order to
  scale this out, one must run a "scale" execution after initial
  deployment.  For example, to scale up to 5 total (2 + 3) instances,
  the following command can be used:
  
  cfy executions start \
  -w scale \
  -p '{"delta": 3, "scalable_entity_name": "vm_and_ip"}' \
  -d poc01



imports:
  - http://www.getcloudify.org/spec/cloudify/3.4m5/types.yaml
  - http://www.getcloudify.org/spec/aws-plugin/1.4.1/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.2/plugin.yaml

inputs:
  default_scale_count:
    description: Number of scale units to deploy by default
    default: 2
  vm_image_id:
    description: AWS instance AMI
    default: ami-6d1c2007
  vm_size:
    description: AWS instance size
    default: t2.micro
  webserver_port:
    description: The HTTP web server port
    default: 8080
  agent_user:
    description: User name used when SSH-ing into the started machine
    default: ec2-user

node_templates:
  elastic_ip:
    type: cloudify.aws.nodes.ElasticIP

  security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      description: Security group for Hello World VM
      rules:
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: { get_property: [ http_web_server, port ] }
          to_port: { get_property: [ http_web_server, port ] }

  vm:
    type: cloudify.aws.nodes.Instance
    properties:
      image_id: { get_input: vm_image_id }
      instance_type: { get_input: vm_size }
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_elastic_ip
        target: elastic_ip
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: security_group
    interfaces:
      ###########################################################
      # We are telling Cloudify to install a diamond
      # monitoring agent on the server.
      #
      # (see https://github.com/BrightcoveOS/Diamond)
      ###########################################################
      cloudify.interfaces.monitoring_agent:
          install:
            implementation: diamond.diamond_agent.tasks.install
            inputs:
              diamond_config:
                interval: 1
          start: diamond.diamond_agent.tasks.start
          stop: diamond.diamond_agent.tasks.stop
          uninstall: diamond.diamond_agent.tasks.uninstall
      cloudify.interfaces.monitoring:
          start:
            implementation: diamond.diamond_agent.tasks.add_collectors
            inputs:
              collectors_config:
                  CPUCollector: {}
                  MemoryCollector: {}
                  LoadAverageCollector: {}
                  DiskUsageCollector:
                    config:
                      devices: x?vd[a-z]+[0-9]*$
                  NetworkCollector: {}

  http_web_server:
    type: cloudify.nodes.WebServer
    properties:
      port: { get_input: webserver_port }
    relationships:
      - type: cloudify.relationships.contained_in
        target: vm
    interfaces:
      cloudify.interfaces.lifecycle:
        configure: scripts/configure.sh
        start: scripts/start.sh
        stop: scripts/stop.sh

outputs:
  http_endpoint:
    description: Web server external endpoint
    value: { concat: ['http://', { get_attribute: [elastic_ip, aws_resource_id] },
                      ':', { get_property: [http_web_server, port] }] }

groups:
  vm_and_ip:
    members: [vm, elastic_ip]

policies:
  scale_policy1:
    type: cloudify.policies.scaling
    properties:
      default_instances: { get_input: default_scale_count }
    targets: [vm_and_ip]
