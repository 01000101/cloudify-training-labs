tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4m5/types.yaml
  - http://www.getcloudify.org/spec/fabric-plugin/1.4/plugin.yaml


inputs:

  public_ip:
    type: string

  private_ip:
    type: string

  ssh_user:
    type: string

  ssh_key_filename:
    type: string

  agents_user:
    default: ubuntu
    type: string

  resources_prefix:
    default: ''
    type: string

  #############################
  # Agent Packages
  #############################

  # Nginx, being the fileserver, also serves agent packages.
  # The key names of the agents must be in the format: distro_release_agent
  # as the key is what's used to name the file, which later allows our
  # agent installer to identify it for your distro and release automatically.
  agent_package_urls:
    default:
      ubuntu_trusty_agent: http://repository.cloudifysource.org/org/cloudify3/3.4.0/m4-RELEASE/Ubuntu-trusty-agent_3.4.0-m4-b393.tar.gz
      ubuntu_precise_agent: http://repository.cloudifysource.org/org/cloudify3/3.4.0/m4-RELEASE/Ubuntu-precise-agent_3.4.0-m4-b393.tar.gz
      centos_7x_agent: http://repository.cloudifysource.org/org/cloudify3/3.4.0/m4-RELEASE/centos-Core-agent_3.4.0-m4-b393.tar.gz
      centos_6x_agent: http://repository.cloudifysource.org/org/cloudify3/3.4.0/m4-RELEASE/centos-Final-agent_3.4.0-m4-b393.tar.gz
      redhat_7x_agent: http://repository.cloudifysource.org/org/cloudify3/3.4.0/m4-RELEASE/redhat-Maipo-agent_3.4.0-m4-b393.tar.gz
      cloudify_windows_agent: http://repository.cloudifysource.org/org/cloudify3/3.4.0/m4-RELEASE/cloudify-windows-agent_3.4.0-m4-b393.exe


node_templates:
  manager_host:
    type: cloudify.nodes.Compute
    properties:
      install_agent: false
      ip: { get_input: public_ip }

  manager:
    type: cloudify.nodes.CloudifyManager
    properties:
      cloudify_packages:
        agents: { get_input: agent_package_urls }

      cloudify:
        resources_prefix: { get_input: resources_prefix }

        cloudify_agent:
          min_workers: 0
          max_workers: 5
          remote_execution_port: 22
          user: { get_input: agents_user }

        workflows:
          task_retries: -1  # this means forever
          task_retry_interval: 30

        policy_engine:
          start_timeout: 30

        security:
          enabled: true
          log_file: REPLACE_WITH_LOG_FILE_PATH
          log_level: REPLACE_WITH_LOG_LEVEL
          userstore_driver:
            implementation: flask_securest.userstores.simple:SimpleUserstore
            properties:
              userstore:
                REPLACE_WITH_USERS_CONFIGURATION
              identifying_attribute: username
          authentication_providers:
            - name: password
              implementation: flask_securest.authentication_providers.password:PasswordAuthenticator
              properties:
                password_hash: plaintext
            - name: token
              implementation: flask_securest.authentication_providers.token:TokenAuthenticator
              properties:
                secret_key: my_secret
          auth_token_generator:
            implementation: flask_securest.authentication_providers.token:TokenAuthenticator
            properties:
              secret_key: my_secret
              expires_in_seconds: 600
          ssl:
            enabled: true
            certificate_path: REPLACE_WITH_CERT_PATH
            private_key_path: REPLACE_WITH_PRIVATE_KEY_PATH

    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: fabric.fabric_plugin.tasks.run_module_task
          inputs:
            task_mapping: cloudify_cli.bootstrap.tasks.bootstrap_docker
            task_properties:
              cloudify_packages: { get_property: [manager, cloudify_packages] }
              agent_local_key_path: { get_input: ssh_key_filename }
              manager_private_ip: { get_input: private_ip }
            fabric_env:
              user: { get_input: ssh_user }
              key_filename: { get_input: ssh_key_filename }
        stop:
          implementation: fabric.fabric_plugin.tasks.run_module_task
          inputs:
            task_mapping: cloudify_cli.bootstrap.tasks.stop_manager_container
            fabric_env:
              user: { get_input: ssh_user }
              key_filename: { get_input: ssh_key_filename }
        delete:
          implementation: fabric.fabric_plugin.tasks.run_module_task
          inputs:
            task_mapping: cloudify_cli.bootstrap.tasks.stop_docker_service
            fabric_env:
              user: { get_input: ssh_user }
              key_filename: { get_input: ssh_key_filename }
      cloudify.interfaces.validation:
        creation:
          implementation: cli.cloudify_cli.bootstrap.tasks.creation_validation
          inputs:
            cloudify_packages: { get_property: [manager, cloudify_packages] }

plugins:
  cli:
    install: false
    executor: central_deployment_agent

outputs:
  manager_ip:
    value: { get_property: [manager_host, ip] }
